ЗАДАНИЕ 1
Для проекта (БД) из предыдущей classwork написать на python модуль populate_db, который будет генерировать случайные данные
и записывать их в базу.
Пример использования модуля:
C:\Users\User>python populate_db -d test.db -n 10
где -d и -n обязательные флаги, через которые в скрипт передаются название БД и количество записей, которое надо сгенерировать.
Для взаимодействия с sqlite использовать модуль slite3 из stdlib. Для генерации рандомных данных использовать бибилиотеку fake_lib,
которую вы писали в предыдущих ДЗ (если сложно будет, то можете использовать сторонние библиотеки я-ля Faker).
После запуска скрипта он должен нагенерировать в каждую таблицу БД то количество рандомных записей, которое было 
передано в параметр -n из консоли, после чего написать в консоль сообщение о том, что работа завершена успешно.
Сам код в populate_db можете писать в произвольном стиле ввиде функций или классов с методами, но желательно применить
знания об интерфейсах и взаимодействии классов из ООП и предыдущих тем. Также желательно написать код так, чтобы в будущем в него 
можно было бы легко вносить изменения, легко тестировать и так далее.


###############################################################################


ЗАДАНИЕ 2
В проект sp500_project добавить поддержку БД Sqlite. Для этого вам нужно будет создать файл с базой в проекте и описать её схему (в ней
будет одна таблица, но можно разделить на несколько если посчитаете нужным). После этого написать небольшой скрипт (python модуль), который
перенесёт данные из csv файла в эту БД SQLITE. После этого добавить класс для поддержки этой БД в проект (data_access layer).

################################################################################

ЗАДАНИЕ 3
Добавить CRUD функциональность в sports_db_project, то есть создать однопользовательское приложение с консольным интерфейсом, которое
будет предоставлять пользователю интерфейс с поддержкой операций CREATE, READ, UPDATE, DELETE для сущестностей в БД.
ТЗ:
1. В главном меню приложения должны быть следующие пункты:
Разделы:
- Выйти
- Список игроков
- Информация об игроке
- Добавить игрока
- Удалить игрока
- Добавить кроссовки для игрока
- Удалить кроссовки для игрока
- Изменить информацию об игроке
- Изменить команду для игрока
- Изменить страну для игрока

=================================================================================

- Список игроков:
1. Задаётся вопрос:
- Хотите применить фильтры (y/n)?
Если y - то выводится список фильтров, если n - то не выводится
- Доступные фильтры:
   - Имя
   - Фамилия
   - Минимальная дата добавления
   - Максимальная дата добавления
   - Минимальный возраст
   - Модель кроссовок
   - Страна
   - Команда

Любой из пунктов пользователь может пропустить.
Например:
Имя:
Фамилия:
Мин дата:
Макс дата:
Мин возраст: 18
Модуль кроссовок: Air Jordan
Старана:
Команда: Manchester United

На основе введённых фильтров возвращается ответ и печатается в консоль
Ответ должен содержать следующие параметры:
 - id игрока
 - Имя
 - Фамилия
 - Название команды
 - Название страны
 - возраст

Если в ответе больше 5 записей то должна быть пагинация. То есть например если есть 10 игроков, которые удовлетворяют условию, то
мы возвращаем сначала 5 записей и печатаем на экран, а также кнопки для просмотра следующих пяти записей или выхода.

==============================================================================

- Информация об игроке
Программа запрашивает id игрока и, если такой есть в БД, возвращает подробную информацию по этому игроку.
Например:
Имя: name
Фамилия: surname
Возраст: 19
...
Страна: Germany
Команда: Manchester United
Кроссовки: [Air Jordan, Air Max]

=================================================================================

- Добавить игрока
Программа запрашивает данные об игроке и его профиле и создаёт в БД запись.
